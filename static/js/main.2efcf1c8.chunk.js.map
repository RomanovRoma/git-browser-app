{"version":3,"sources":["components/Head.js","components/Repo-list.js","components/Repo-exact.js","components/Header.js","components/Main.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Head","props","Helmet","title","charSet","name","content","defaultProps","RepoList","repoList","userName","useParams","map","repo","key","to","RepoExact","readme","id","source","React","memo","repositoryName","className","Main","useState","value","setValue","history","useHistory","useEffect","listener","event","code","push","document","addEventListener","removeEventListener","type","onChange","target","onClick","Home","setRepoList","url","axios","get","then","it","data","item","setReadme","urlReadme","download_url","text","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2efcf1c8.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet } from \"react-helmet\";\n\nconst Head = (props) => (\n  <Helmet>\n    <title>Git Browser App - {props.title}</title>\n    <meta charSet=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#FF0000\" />\n  </Helmet>\n);\n\nHead.propTypes = {\n  title: PropTypes.string,\n};\n\nHead.defaultProps = {\n  title: \"Git Browser App\",\n};\n\nexport default Head;\n","import React from \"react\";\nimport { Link, useParams } from 'react-router-dom'\nimport Head from \"./Head\";\n\n\nconst RepoList = ({ repoList }) => {\n  const { userName } = useParams()\n\n  return (\n    <div>\n      <Head title=\"LIST\" />\n      <div>\n        {repoList.map((repo) => (\n          <div key={repo}>\n            <Link to={`/${userName}/${repo}`} >{repo}</Link>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nRepoList.propTypes = {};\n\nexport default RepoList","import React from \"react\";\n\nimport ReactMarkdown from 'react-markdown'\nimport Head from './Head'\n\nconst RepoExact = ({ readme }) => {\n  return (\n    <div>\n      <Head title=\"README\" />\n      <div id=\"description\">\n        <ReactMarkdown source={readme} />\n      </div>\n    </div>\n  );\n};\n\nRepoExact.propTypes = {};\n\nexport default RepoExact","import React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\n\nconst Header = () => {\n  const { userName, repositoryName } = useParams();\n\n  return (\n    <nav className=\"flex items-center justify-between flex-wrap bg-teal-500 p-6 text-white font-bald\">\n      <div id=\"repository-name\">{repositoryName || userName || \"Welcome\"}</div>\n      {userName && (\n        <Link to=\"/\" id=\"go-back\">\n          Go Home\n        </Link>\n      )}\n      {repositoryName && (\n        <Link to={`/${userName}`} id=\"go-repository-list\">\n          Go Back\n        </Link>\n      )}\n    </nav>\n  );\n};\n\nHeader.propTypes = {};\n\nexport default React.memo(Header);\n","import React from \"react\";\nimport Head from \"./Head\";\nimport { useHistory } from 'react-router-dom'\nimport { useState, useEffect } from \"react\";\n\nconst Main = () => {\n  const [value, setValue] = useState('')\n  const history = useHistory()\n\n  const onChange = (event) => {\n    setValue(event.target.value)\n  }\n\n  const onClick = () => {\n    history.push(value)\n  }\n\n  useEffect(() => {\n    const listener = (event) => {\n      if (event.code === 'Enter' || event.code === 'NumpadEnter') {\n        history.push(value)\n      }\n    }\n    document.addEventListener('keydown', listener)\n    return () => {\n      document.removeEventListener('keydown', listener)\n    }\n  })\n\n  return (\n    <div>\n      <Head title=\"Hello\" />\n      <div>\n        <input\n          id=\"input-field\"\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n        />\n        <button\n          id=\"search-button\"\n          type=\"button\"\n          onClick={onClick}\n        >\n          Search\n        </button>\n      </div>\n    </div>\n  );\n};\n\nMain.propTypes = {};\n\nexport default Main","import React, { useState, useEffect } from \"react\";\nimport { Switch, Route, useParams } from \"react-router-dom\";\nimport axios from 'axios'\n\nimport RepoList from \"./Repo-list\";\nimport RepoExact from \"./Repo-exact\";\nimport Head from \"./Head\"\nimport Header from \"./Header\"\nimport Main from \"./Main\"\n\n\nconst Home = () => {\n  const { userName, repositoryName } = useParams()\n\n  const [repoList, setRepoList] = useState([])\n  const url = `https://api.github.com/users/${userName}/repos`\n\n  useEffect(() => {\n    if (typeof userName != 'undefined') {\n      axios.get(url).then((it) => {\n        setRepoList(it.data.map((item) => item.name))\n      })\n    }\n  }, [url, userName])\n\n  const [readme, setReadme] = useState('')\n  const urlReadme = `https://api.github.com/repos/${userName}/${repositoryName}/readme`\n\n  useEffect(() => {\n    if (typeof userName !== 'undefined' && repositoryName !== 'undefined') {\n      axios.get(urlReadme).then(({ data }) => {\n        axios.get(data.download_url).then(({ data: text }) => {\n          setReadme(text)\n        })\n      })\n    }\n  }, [urlReadme, userName, repositoryName])\n\n  return (\n    <div>\n      <Head title=\"Home\" />\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={() => <Main />} />\n        <Route exact path=\"/:userName\" component={() => <RepoList repoList={repoList} />} />\n        <Route exact path=\"/:userName/:repositoryName\" component={() => <RepoExact readme={readme} />} />\n      </Switch>\n    </div>\n  );\n};\n\nHome.propTypes = {};\n\nexport default Home\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Home from \"./components/Home\";\n\n\nconst App = () => {\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={() => <Home />} />\n          <Route exact path=\"/:userName\" component={() => <Home />} />\n          <Route exact path=\"/:userName/:repositoryName\" component={() => <Home />}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './tailwind.output.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}